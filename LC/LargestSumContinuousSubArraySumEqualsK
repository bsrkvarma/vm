
    //Finds the sum of the largest contiguous sub array whose sum equal to k.
    class LargestSumContinuousSubArraySumEqualsK
    {

        //What we are trying to do?
        //To find the max sub-array whose sum equals to given value, we need to traverse through the all possible sub-array's and
        //find their sum and get their indexes whose sum is equal to the required value.
        //Once we have all such values, we can return the Max of all such indexes.
        //This takes O(n^2) as we need to loop-through all possible sub array's.
        //To improve the performance, we can Add each element in array and if the sum of any of it equals to K, we take the max of
        //the indexes of such occurence. This will cover only the complete traversal of the array.
        //To cover remaining sub arrays, we can try storing the results in a dictionary and take the difference of
        //(Sum of the values till that index) and K = the value at that index then that is one of the possible sub array.
        //If that sub array length is greater than the already measured max sub array length, then it is the max length.
        public static int Test(int[] array, int k)
        {
            int res = 0;
            var currentSum = 0;
            var dict = new Dictionary<int, int>();
            
            for (int i = 0; i < array.Length; i++)
            {
                currentSum = currentSum + array[i];
                if (currentSum == k)
                    res = i + 1;
                if (!dict.ContainsKey(currentSum))
                    dict.Add(currentSum, i);
                if (dict.ContainsKey(currentSum - k))
                {
                    if (res < i - dict[currentSum - k])
                        res = i - dict[currentSum - k];
                }
            }
            return res;
        }
    }
